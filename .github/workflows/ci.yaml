# This workflow will do a clean install of node dependencies, build the source
# code and run lints and tests.

name: CI

on:
  push:
    branches:
      - main
      - releases/**
  pull_request:
    branches:
      - main
      - releases/**

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3
        with:
          fetch-depth: 2

      - if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
        run: git remote set-branches --add origin main && git fetch origin main --depth 1

      - name: Setup Node.js
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3
        with:
          node-version: "16"

      - name: Setup pnpm
        run: |-
          corepack enable
          pnpm --version

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Cache pnpm modules
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.OS }}-pnpm-current-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-current

      - name: Install packages
        run: pnpm install

      - name: Build
        run: pnpm exec nx run-many --target=build

      - name: Run linter
        run: pnpm exec nx run-many --target=lint

  test:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        node:
          - "16"
        include:
          - os: ubuntu-latest
            node: "14"
    name: Test / ${{ matrix.os }} / Node.JS ${{ matrix.node }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3

      - if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
        run: git remote set-branches --add origin main && git fetch origin main --depth 1

      - name: Setup Node.js
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm
        run: |-
          corepack enable
          pnpm --version

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Cache pnpm modules
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.OS }}-pnpm-current-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-current

      - name: Install packages
        run: pnpm install

      - name: Setup Codecov uploader
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: pnpm exec install-codecov

      - name: Audit packages
        run: pnpm audit

      - name: Build
        run: pnpm exec nx run-many --target=build

      - name: Run tests (without coverage)
        if: matrix.node != '16' || matrix.os != 'ubuntu-latest'
        run: pnpm exec nx run-many --target=test

      - name: Run tests (with coverage)
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: pnpm exec nx run-many --target=test:coverage

      - name: Export coverage report
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: pnpm exec nx run-many --target=coverage-report

      - name: Upload coverage
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: pnpm exec upload-coverage
