# This workflow will do a clean install of node dependencies, build the source
# code and run lints and tests.

name: CI

on:
  push:
    branches:
      - main
      - releases/**
  pull_request:
    branches:
      - main
      - releases/**

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3
        with:
          fetch-depth: 2

      - if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
        run: git remote set-branches --add origin main && git fetch

      - name: Setup Node.js
        uses: actions/setup-node@eeb10cff27034e7acf239c5d29f62154018672fd # tag=v3
        with:
          node-version: "16"

      - name: Setup pnpm
        run: |-
          corepack enable
          pnpm --version

      - name: Set pnpm store-dir
        run: pnpm config set store-dir .pnpm-store

      - name: Cache pnpm modules
        uses: actions/cache@c3f1317a9e7b1ef106c153ac8c0f00fed3ddbc0d # tag=v3
        with:
          path: .pnpm-store
          key: ${{ runner.OS }}-pnpm-current-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-current

      - name: Install packages
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Run linter
        run: pnpm run lint

  test:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        node:
          - "16"
        include:
          - os: ubuntu-latest
            node: "14"
    name: Test / ${{ matrix.os }} / Node.JS ${{ matrix.node }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Setup Node.js
        uses: actions/setup-node@eeb10cff27034e7acf239c5d29f62154018672fd # tag=v3
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm
        run: |-
          corepack enable
          pnpm --version

      - name: Set pnpm store-dir
        run: pnpm config set store-dir .pnpm-store

      - name: Cache pnpm modules
        uses: actions/cache@c3f1317a9e7b1ef106c153ac8c0f00fed3ddbc0d # tag=v3
        with:
          path: .pnpm-store
          key: ${{ runner.OS }}-pnpm-current-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-current

      - name: Setup CodeCov uploader
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: bash scripts/install-codecov

      - name: Install packages
        run: pnpm install

      - name: Audit packages
        run: pnpm audit

      - name: Build
        run: pnpm run build

      - name: Run tests (without coverage)
        if: matrix.node != '16' || matrix.os != 'ubuntu-latest'
        run: pnpm run test

      - name: Run tests (with coverage)
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: pnpm run test:coverage

      - name: Export coverage report
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: pnpm run test:coverage-lcov

      - name: Upload coverage
        if: matrix.node == '16' && matrix.os == 'ubuntu-latest'
        run: node scripts/upload-coverage.js
